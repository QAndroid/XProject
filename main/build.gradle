apply from: "${rootProject.rootDir}/gradle/config/common_build.gradle"
apply from: "${rootProject.rootDir}/gradle/config/debug_build.gradle"

group = 'workshop1024.com.xproject'
version = '1.0'

android {
    defaultConfig {
        versionCode 1
        versionName "1.0"
    }

    //产品维度，可将productFlavors分不同维度组合，即devBaiduDebug等
    //参考：https://blog.csdn.net/user11223344abc/article/details/78784373
    flavorDimensions "develop", "channel"

    productFlavors {
        //当构建一个variant使用flavor时，下面的配置覆盖defaultConfig块中的配置

        //Mock产品风格，相关数据的Mock实现
        mock {
            dimension "develop"
            versionNameSuffix "-mock"

            //添加构建变体专用的ProGuard规则，现在mock使用所有三个defaultProguardFile，proguard-rules.pro和mock-rules.pro文件规则
            proguardFile "mock-rules.pro"

            //启用pre-dexing构建功能，缩短Dalvik可执行文件分包输出构建时间
            //参考：https://developer.android.com/studio/build/multidex
            minSdkVersion project.ext.dalvik_minsdk_version

            resConfigs "en", "xxhdpi"
        }
        //Dev产品风格
        dev {
            dimension "develop"
            versionNameSuffix "-dev"

            //在从命令行构建时避免使用传统的multidex，设置minSdkVersion为21或更高。当我们使用Andoid 2.3或者更高
            //在面向运行API level 21或则更高的设备开发时，构建自动避免了传统的multidex，无论是设置什么minSdkVersion
            minSdkVersion project.ext.dalvik_minsdk_version

            //下面的配置限制"dev" flavor使用英语字符资源和xxhdpi屏幕密度资源
            resConfigs "en", "xxhdpi"
        }
        //线上产品风格
        prod {
            dimension "develop"
        }

        baidu {
            dimension "channel"
        }
        xiaomi {
            dimension "channel"
        }
    }

    resourcePrefix "main_"

    //库项目配置的productFlavor后,因为Gradle默认的输出是release,现在没有release这种输出配置,所以就会没法生成aar.所以我们可以通过下面的配置来解决
    //参考：http://leoray.leanote.com/post/gradle-productFlovors
    //设置默认发布类型
    defaultPublishConfig 'prodBaiduRelease'
}

dependencies {
    implementation 'workshop1024.com.xproject:base:1.0'

    implementation "androidx.recyclerview:recyclerview:$project.ext.recyclerview_version"
    implementation "androidx.appcompat:appcompat:$project.ext.appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$project.ext.constraintlayout_version"
    implementation "com.google.android.material:material:$project.ext.material_version"
    //Kotlin相关
    //协程
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$project.ext.coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$project.ext.coroutines_version"
    //Espresso Idling Resource相关
    implementation "androidx.test.espresso:espresso-idling-resource:$project.ext.espresso_version"
    //rxJava相关
    implementation "io.reactivex:rxjava:$project.rxjava_version"
    implementation "io.reactivex:rxandroid:$project.rxandroid_version"

    androidTestImplementation project(':androidTest')
    //RecyclerView测试
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$project.ext.espresso_version"
    androidTestImplementation("androidx.arch.core:core-testing:$project.ext.coretest_version") {
        //Mock注解在common_build.gradle中mockito-all中也包含，exclude解决依赖冲突
        //参考：https://juejin.im/post/5acd6daaf265da238a30ca73
        exclude group: 'org.mockito', module: 'mockito-core'
    }
}
